<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue编译打包部署一些问题</title>
      <link href="2021/04/12/vue%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>2021/04/12/vue%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>编译打包一般是放置到nginx目录下，nginx的位置不定，每个环境也不一定相同，获取项目的静态文件若是绝对路径则会导致文件找不到，所以一般都要统一调整为相对路径</p></blockquote><blockquote><p>统一前缀也是为了nginx的统一</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><blockquote><p> 修改 vue.config.js文件</p></blockquote><pre><code class="bash">module.exports = &#123;    publicPath: &#39;./&#39;,&#125;</code></pre><h3 id="统一前缀"><a href="#统一前缀" class="headerlink" title="统一前缀"></a>统一前缀</h3><blockquote><p>修改 /rouer/index.js</p></blockquote><blockquote><p><strong>base: process.env.BASE_URL + ‘hly’,</strong></p></blockquote><pre><code class="bash">export default new Router(&#123;  mode: &#39;history&#39;,  base: process.env.BASE_URL + &#39;hly&#39;,  scrollBehavior: () =&gt; (&#123; y: 0 &#125;),  routes: constantRouterMap&#125;)</code></pre><h3 id="多环境打包配置"><a href="#多环境打包配置" class="headerlink" title="多环境打包配置"></a>多环境打包配置</h3><pre><code class="bash">通过不同命令行切换不同环境api等信息，例如： npm run dev 调用本地环境api           npm run test 调用测试环境api           npm run build 调用线上环境api（1）先在package.json文件中添加：&quot;test&quot;: &quot;vue-cli-service build --mode test&quot;（2）在项目目录下建立 .env文件和.env.test文件 .env文件NODE_ENV = &#39;production&#39;VUE_APP_FLAG = &#39;pro&#39;.env.test文件（outputDir：打包时的输出目录名字，若需默认输出到dist目录，则可不写该变量）NODE_ENV = &#39;production&#39;VUE_APP_FLAG = &#39;test&#39;outputDir = test在vue.config.js文件中添加：outputDir: process.env.outputDir,（3）在main.js文件中配置api变量/*第一层if判断生产环境和开发环境*/if (process.env.NODE_ENV === &#39;production&#39;) &#123;/*第二层if，根据.env文件中的VUE_APP_FLAG判断是生产环境还是测试环境*/if (process.env.VUE_APP_FLAG === &#39;pro&#39;) &#123;//production 生产环境axios.defaults.baseURL = &#39;http://api.xinggeyun.com&#39;;&#125; else &#123;//test 测试环境axios.defaults.baseURL = &#39;http://127.0.0.1:8102&#39;;&#125;&#125; else &#123;//dev 开发环境axios.defaults.baseURL = &#39;http://127.0.0.1:8102&#39;;&#125;npm run test后，即可在目录文件中看到test文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/12/hello-world/"/>
      <url>2021/04/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre><code>$ hexo new [layout] &lt;title&gt;新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</code></pre><pre><code class="bash">$ hexo new &quot;post title with whitespace&quot;参数    描述-p, --path    自定义新文章的路径-r, --replace    如果存在同名文章，将其替换-s, --slug    文章的 Slug，作为新文章的文件名和发布后的 URL</code></pre><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><pre><code class="bash">hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code class="bash">hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="2021/04/12/My-New-Post/"/>
      <url>2021/04/12/My-New-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> hly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
